# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-06 22:14
from __future__ import unicode_literals

import autoslug.fields
import colorful.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('home', models.TextField(blank=True, default='')),
                ('venue', models.TextField(blank=True, default='')),
                ('city', models.CharField(blank=True, default='', max_length=64)),
                ('contact_email', models.CharField(blank=True, max_length=100)),
                ('custom_css', models.TextField(blank=True)),
                ('external_css_link', models.URLField(blank=True)),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, verbose_name='Your Name')),
                ('email', models.EmailField(max_length=254)),
                ('biography', models.TextField(verbose_name='Biography')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('twitter', models.CharField(blank=True, default='', max_length=100, verbose_name='Twitter')),
                ('linkedin', models.CharField(blank=True, default='', max_length=100, verbose_name='LinkedIn')),
                ('github', models.CharField(blank=True, default='', max_length=100, verbose_name='Github')),
                ('website', models.CharField(blank=True, default='', max_length=100, verbose_name='Website')),
                ('facebook', models.CharField(blank=True, default='', max_length=100, verbose_name='Facebook')),
                ('mastodon', models.CharField(blank=True, default='', max_length=100, verbose_name='Mastodon')),
                ('phone_number', models.CharField(blank=True, default='', max_length=64, verbose_name='Phone number')),
                ('language', models.CharField(blank=True, max_length=10)),
                ('notes', models.TextField(blank=True, default='', help_text='This field is only visible by organizers.', verbose_name='Notes')),
                ('vip', models.BooleanField(default=False)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=128, verbose_name='Talk Title')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='title', unique=True)),
                ('description', models.TextField(verbose_name='Description of your talk')),
                ('notes', models.TextField(blank=True, help_text='If you have any constraint or if you have anything that may help you to select your talk, like a video or slides of your talk, please write it down here', verbose_name='Message to organizers')),
                ('videotaped', models.BooleanField(default=True, verbose_name="I'm ok to be recorded on video")),
                ('video_licence', models.CharField(choices=[('CC-Zero CC-BY', 'CC-Zero CC-BY'), ('CC-BY-SA', 'CC-BY-SA'), ('CC-BY-ND', 'CC-BY-ND'), ('CC-BY-NC', 'CC-BY-NC'), ('CC-BY-NC-SA', 'CC-BY-NC-SA'), ('CC-BY-NC-ND', 'CC-BY-NC-ND')], default='CC-BY-SA', max_length=10, verbose_name='Video licence')),
                ('sound', models.BooleanField(default=False, verbose_name='I need sound')),
                ('accepted', models.NullBooleanField(default=None)),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Duration (min)')),
                ('plenary', models.BooleanField(default=False)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
            ],
            options={
                'ordering': ('category__id', 'title'),
            },
        ),
        migrations.CreateModel(
            name='TalkCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Default duration (min)')),
                ('color', colorful.fields.RGBColorField(default='#ffffff', verbose_name='Color on program')),
                ('label', models.CharField(blank=True, default='', max_length=64, verbose_name='Label on program')),
                ('opening_date', models.DateTimeField(blank=True, default=None, null=True)),
                ('closing_date', models.DateTimeField(blank=True, default=None, null=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vote', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(-2), django.core.validators.MaxValueValidator(2)])),
                ('talk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cfp.Talk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='talk',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cfp.TalkCategory', verbose_name='Talk Category'),
        ),
        migrations.AddField(
            model_name='talk',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.Site'),
        ),
        migrations.AddField(
            model_name='talk',
            name='speakers',
            field=models.ManyToManyField(to='cfp.Participant', verbose_name='Speakers'),
        ),
        migrations.AddField(
            model_name='talk',
            name='track',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cfp.Track', verbose_name='Track'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together=set([('talk', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='track',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='talkcategory',
            unique_together=set([('site', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together=set([('site', 'email')]),
        ),
    ]
